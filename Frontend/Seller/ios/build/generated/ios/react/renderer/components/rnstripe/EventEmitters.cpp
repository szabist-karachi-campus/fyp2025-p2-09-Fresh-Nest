
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/rnstripe/EventEmitters.h>
#include <jsi/JSIDynamic.h>

namespace facebook::react {

void AddressSheetViewEventEmitter::onSubmitAction(OnSubmitAction $event) const {
  dispatchEvent("submitAction", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "result", jsi::valueFromDynamic(runtime, $event.result));
    return $payload;
  });
}


void AddressSheetViewEventEmitter::onErrorAction(OnErrorAction $event) const {
  dispatchEvent("errorAction", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "error", jsi::valueFromDynamic(runtime, $event.error));
    return $payload;
  });
}


void AddToWalletButtonEventEmitter::onCompleteAction(OnCompleteAction $event) const {
  dispatchEvent("completeAction", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "error", jsi::valueFromDynamic(runtime, $event.error));
    return $payload;
  });
}


void ApplePayButtonEventEmitter::onShippingMethodSelectedAction(OnShippingMethodSelectedAction $event) const {
  dispatchEvent("shippingMethodSelectedAction", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "shippingMethod", jsi::valueFromDynamic(runtime, $event.shippingMethod));
    return $payload;
  });
}


void ApplePayButtonEventEmitter::onShippingContactSelectedAction(OnShippingContactSelectedAction $event) const {
  dispatchEvent("shippingContactSelectedAction", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "shippingContact", jsi::valueFromDynamic(runtime, $event.shippingContact));
    return $payload;
  });
}


void ApplePayButtonEventEmitter::onCouponCodeEnteredAction(OnCouponCodeEnteredAction $event) const {
  dispatchEvent("couponCodeEnteredAction", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "couponCode", $event.couponCode);
    return $payload;
  });
}


void ApplePayButtonEventEmitter::onOrderTrackingAction(OnOrderTrackingAction $event) const {
  dispatchEvent("orderTrackingAction", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void AuBECSDebitFormEventEmitter::onCompleteAction(OnCompleteAction $event) const {
  dispatchEvent("completeAction", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "accountNumber", $event.accountNumber);
$payload.setProperty(runtime, "bsbNumber", $event.bsbNumber);
$payload.setProperty(runtime, "email", $event.email);
$payload.setProperty(runtime, "name", $event.name);
    return $payload;
  });
}


void CardFieldEventEmitter::onCardChange(OnCardChange $event) const {
  dispatchEvent("cardChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "card", jsi::valueFromDynamic(runtime, $event.card));
    return $payload;
  });
}


void CardFieldEventEmitter::onFocusChange(OnFocusChange $event) const {
  dispatchEvent("focusChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "focusedField", $event.focusedField);
    return $payload;
  });
}


void CardFormEventEmitter::onFocusChange(OnFocusChange $event) const {
  dispatchEvent("focusChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "focusedField", toString($event.focusedField));
    return $payload;
  });
}


void CardFormEventEmitter::onFormComplete(OnFormComplete $event) const {
  dispatchEvent("formComplete", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "card", jsi::valueFromDynamic(runtime, $event.card));
    return $payload;
  });
}




} // namespace facebook::react
