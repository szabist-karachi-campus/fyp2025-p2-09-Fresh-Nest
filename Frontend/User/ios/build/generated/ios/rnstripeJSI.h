/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeStripeSdkModuleCxxSpecJSI : public TurboModule {
protected:
  NativeStripeSdkModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value initialise(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Value createPaymentMethod(jsi::Runtime &rt, jsi::Object params, jsi::Object options) = 0;
  virtual jsi::Value handleNextAction(jsi::Runtime &rt, jsi::String paymentIntentClientSecret, std::optional<jsi::String> returnURL) = 0;
  virtual jsi::Value handleNextActionForSetup(jsi::Runtime &rt, jsi::String setupIntentClientSecret, std::optional<jsi::String> returnURL) = 0;
  virtual jsi::Value confirmPayment(jsi::Runtime &rt, jsi::String paymentIntentClientSecret, std::optional<jsi::Object> params, std::optional<jsi::Object> options) = 0;
  virtual jsi::Value confirmSetupIntent(jsi::Runtime &rt, jsi::String paymentIntentClientSecret, jsi::Object params, jsi::Object options) = 0;
  virtual jsi::Value retrievePaymentIntent(jsi::Runtime &rt, jsi::String clientSecret) = 0;
  virtual jsi::Value retrieveSetupIntent(jsi::Runtime &rt, jsi::String clientSecret) = 0;
  virtual jsi::Value initPaymentSheet(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Value intentCreationCallback(jsi::Runtime &rt, jsi::Object result) = 0;
  virtual jsi::Value presentPaymentSheet(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value confirmPaymentSheetPayment(jsi::Runtime &rt) = 0;
  virtual jsi::Value createTokenForCVCUpdate(jsi::Runtime &rt, jsi::String cvc) = 0;
  virtual jsi::Value handleURLCallback(jsi::Runtime &rt, jsi::String url) = 0;
  virtual jsi::Value createToken(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Value openApplePaySetup(jsi::Runtime &rt) = 0;
  virtual jsi::Value verifyMicrodeposits(jsi::Runtime &rt, bool isPaymentIntent, jsi::String clientSecret, jsi::Object params) = 0;
  virtual jsi::Value collectBankAccount(jsi::Runtime &rt, bool isPaymentIntent, jsi::String clientSecret, jsi::Object params) = 0;
  virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
  virtual jsi::Value canAddCardToWallet(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Value isCardInWallet(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Value collectBankAccountToken(jsi::Runtime &rt, jsi::String clientSecret, jsi::Object params) = 0;
  virtual jsi::Value collectFinancialConnectionsAccounts(jsi::Runtime &rt, jsi::String clientSecret, jsi::Object params) = 0;
  virtual jsi::Value resetPaymentSheetCustomer(jsi::Runtime &rt) = 0;
  virtual jsi::Value isPlatformPaySupported(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Value createPlatformPayPaymentMethod(jsi::Runtime &rt, jsi::Object params, bool usesDeprecatedTokenFlow) = 0;
  virtual jsi::Value dismissPlatformPay(jsi::Runtime &rt) = 0;
  virtual jsi::Value updatePlatformPaySheet(jsi::Runtime &rt, jsi::Array summaryItems, jsi::Array shippingMethods, jsi::Array errors) = 0;
  virtual jsi::Value confirmPlatformPay(jsi::Runtime &rt, jsi::String clientSecret, jsi::Object params, bool isPaymentIntent) = 0;
  virtual jsi::Value configureOrderTracking(jsi::Runtime &rt, jsi::String orderTypeIdentifier, jsi::String orderIdentifier, jsi::String webServiceUrl, jsi::String authenticationToken) = 0;
  virtual jsi::Value initCustomerSheet(jsi::Runtime &rt, jsi::Object params, jsi::Object customerAdapterOverrides) = 0;
  virtual jsi::Value presentCustomerSheet(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual jsi::Value retrieveCustomerSheetPaymentOptionSelection(jsi::Runtime &rt) = 0;
  virtual jsi::Value customerAdapterFetchPaymentMethodsCallback(jsi::Runtime &rt, jsi::Array paymentMethods) = 0;
  virtual jsi::Value customerAdapterAttachPaymentMethodCallback(jsi::Runtime &rt, jsi::Object paymentMethod) = 0;
  virtual jsi::Value customerAdapterDetachPaymentMethodCallback(jsi::Runtime &rt, jsi::Object paymentMethod) = 0;
  virtual jsi::Value customerAdapterSetSelectedPaymentOptionCallback(jsi::Runtime &rt) = 0;
  virtual jsi::Value customerAdapterFetchSelectedPaymentOptionCallback(jsi::Runtime &rt, std::optional<jsi::String> paymentOption) = 0;
  virtual jsi::Value customerAdapterSetupIntentClientSecretForCustomerAttachCallback(jsi::Runtime &rt, jsi::String clientSecret) = 0;
  virtual jsi::Value createEmbeddedPaymentElement(jsi::Runtime &rt, jsi::Object intentConfig, jsi::Object configuration) = 0;
  virtual jsi::Value confirmEmbeddedPaymentElement(jsi::Runtime &rt, int viewTag) = 0;
  virtual jsi::Value updateEmbeddedPaymentElement(jsi::Runtime &rt, jsi::Object intentConfig) = 0;
  virtual jsi::Value clearEmbeddedPaymentOption(jsi::Runtime &rt, int viewTag) = 0;

};

template <typename T>
class JSI_EXPORT NativeStripeSdkModuleCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "StripeSdk";

protected:
  NativeStripeSdkModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeStripeSdkModuleCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

  template <typename OnConfirmHandlerCallbackType> void emitOnConfirmHandlerCallback(OnConfirmHandlerCallbackType value) {
    static_assert(bridging::supportsFromJs<OnConfirmHandlerCallbackType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onConfirmHandlerCallback"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename OnFinancialConnectionsEventType> void emitOnFinancialConnectionsEvent(OnFinancialConnectionsEventType value) {
    static_assert(bridging::supportsFromJs<OnFinancialConnectionsEventType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onFinancialConnectionsEvent"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  void emitOnOrderTrackingCallback() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["onOrderTrackingCallback"]).emit();
  }

  void emitOnCustomerAdapterFetchPaymentMethodsCallback() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["onCustomerAdapterFetchPaymentMethodsCallback"]).emit();
  }

  template <typename OnCustomerAdapterAttachPaymentMethodCallbackType> void emitOnCustomerAdapterAttachPaymentMethodCallback(OnCustomerAdapterAttachPaymentMethodCallbackType value) {
    static_assert(bridging::supportsFromJs<OnCustomerAdapterAttachPaymentMethodCallbackType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onCustomerAdapterAttachPaymentMethodCallback"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename OnCustomerAdapterDetachPaymentMethodCallbackType> void emitOnCustomerAdapterDetachPaymentMethodCallback(OnCustomerAdapterDetachPaymentMethodCallbackType value) {
    static_assert(bridging::supportsFromJs<OnCustomerAdapterDetachPaymentMethodCallbackType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onCustomerAdapterDetachPaymentMethodCallback"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename OnCustomerAdapterSetSelectedPaymentOptionCallbackType> void emitOnCustomerAdapterSetSelectedPaymentOptionCallback(OnCustomerAdapterSetSelectedPaymentOptionCallbackType value) {
    static_assert(bridging::supportsFromJs<OnCustomerAdapterSetSelectedPaymentOptionCallbackType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onCustomerAdapterSetSelectedPaymentOptionCallback"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  void emitOnCustomerAdapterFetchSelectedPaymentOptionCallback() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["onCustomerAdapterFetchSelectedPaymentOptionCallback"]).emit();
  }

  void emitOnCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["onCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback"]).emit();
  }

  template <typename EmbeddedPaymentElementDidUpdateHeightType> void emitEmbeddedPaymentElementDidUpdateHeight(EmbeddedPaymentElementDidUpdateHeightType value) {
    static_assert(bridging::supportsFromJs<EmbeddedPaymentElementDidUpdateHeightType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["embeddedPaymentElementDidUpdateHeight"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  void emitEmbeddedPaymentElementWillPresent() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["embeddedPaymentElementWillPresent"]).emit();
  }

  template <typename EmbeddedPaymentElementDidUpdatePaymentOptionType> void emitEmbeddedPaymentElementDidUpdatePaymentOption(EmbeddedPaymentElementDidUpdatePaymentOptionType value) {
    static_assert(bridging::supportsFromJs<EmbeddedPaymentElementDidUpdatePaymentOptionType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["embeddedPaymentElementDidUpdatePaymentOption"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename EmbeddedPaymentElementFormSheetConfirmCompleteType> void emitEmbeddedPaymentElementFormSheetConfirmComplete(EmbeddedPaymentElementFormSheetConfirmCompleteType value) {
    static_assert(bridging::supportsFromJs<EmbeddedPaymentElementFormSheetConfirmCompleteType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["embeddedPaymentElementFormSheetConfirmComplete"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  void emitEmbeddedPaymentElementRowSelectionImmediateAction() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["embeddedPaymentElementRowSelectionImmediateAction"]).emit();
  }

  template <typename EmbeddedPaymentElementLoadingFailedType> void emitEmbeddedPaymentElementLoadingFailed(EmbeddedPaymentElementLoadingFailedType value) {
    static_assert(bridging::supportsFromJs<EmbeddedPaymentElementLoadingFailedType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["embeddedPaymentElementLoadingFailed"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

private:
  class Delegate : public NativeStripeSdkModuleCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeStripeSdkModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {
      eventEmitterMap_["onConfirmHandlerCallback"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["onFinancialConnectionsEvent"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["onOrderTrackingCallback"] = std::make_shared<AsyncEventEmitter<>>();
      eventEmitterMap_["onCustomerAdapterFetchPaymentMethodsCallback"] = std::make_shared<AsyncEventEmitter<>>();
      eventEmitterMap_["onCustomerAdapterAttachPaymentMethodCallback"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["onCustomerAdapterDetachPaymentMethodCallback"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["onCustomerAdapterSetSelectedPaymentOptionCallback"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["onCustomerAdapterFetchSelectedPaymentOptionCallback"] = std::make_shared<AsyncEventEmitter<>>();
      eventEmitterMap_["onCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback"] = std::make_shared<AsyncEventEmitter<>>();
      eventEmitterMap_["embeddedPaymentElementDidUpdateHeight"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["embeddedPaymentElementWillPresent"] = std::make_shared<AsyncEventEmitter<>>();
      eventEmitterMap_["embeddedPaymentElementDidUpdatePaymentOption"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["embeddedPaymentElementFormSheetConfirmComplete"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["embeddedPaymentElementRowSelectionImmediateAction"] = std::make_shared<AsyncEventEmitter<>>();
      eventEmitterMap_["embeddedPaymentElementLoadingFailed"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
    }

    jsi::Value initialise(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::initialise) == 2,
          "Expected initialise(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::initialise, jsInvoker_, instance_, std::move(params));
    }
    jsi::Value createPaymentMethod(jsi::Runtime &rt, jsi::Object params, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::createPaymentMethod) == 3,
          "Expected createPaymentMethod(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::createPaymentMethod, jsInvoker_, instance_, std::move(params), std::move(options));
    }
    jsi::Value handleNextAction(jsi::Runtime &rt, jsi::String paymentIntentClientSecret, std::optional<jsi::String> returnURL) override {
      static_assert(
          bridging::getParameterCount(&T::handleNextAction) == 3,
          "Expected handleNextAction(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleNextAction, jsInvoker_, instance_, std::move(paymentIntentClientSecret), std::move(returnURL));
    }
    jsi::Value handleNextActionForSetup(jsi::Runtime &rt, jsi::String setupIntentClientSecret, std::optional<jsi::String> returnURL) override {
      static_assert(
          bridging::getParameterCount(&T::handleNextActionForSetup) == 3,
          "Expected handleNextActionForSetup(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleNextActionForSetup, jsInvoker_, instance_, std::move(setupIntentClientSecret), std::move(returnURL));
    }
    jsi::Value confirmPayment(jsi::Runtime &rt, jsi::String paymentIntentClientSecret, std::optional<jsi::Object> params, std::optional<jsi::Object> options) override {
      static_assert(
          bridging::getParameterCount(&T::confirmPayment) == 4,
          "Expected confirmPayment(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::confirmPayment, jsInvoker_, instance_, std::move(paymentIntentClientSecret), std::move(params), std::move(options));
    }
    jsi::Value confirmSetupIntent(jsi::Runtime &rt, jsi::String paymentIntentClientSecret, jsi::Object params, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::confirmSetupIntent) == 4,
          "Expected confirmSetupIntent(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::confirmSetupIntent, jsInvoker_, instance_, std::move(paymentIntentClientSecret), std::move(params), std::move(options));
    }
    jsi::Value retrievePaymentIntent(jsi::Runtime &rt, jsi::String clientSecret) override {
      static_assert(
          bridging::getParameterCount(&T::retrievePaymentIntent) == 2,
          "Expected retrievePaymentIntent(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::retrievePaymentIntent, jsInvoker_, instance_, std::move(clientSecret));
    }
    jsi::Value retrieveSetupIntent(jsi::Runtime &rt, jsi::String clientSecret) override {
      static_assert(
          bridging::getParameterCount(&T::retrieveSetupIntent) == 2,
          "Expected retrieveSetupIntent(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::retrieveSetupIntent, jsInvoker_, instance_, std::move(clientSecret));
    }
    jsi::Value initPaymentSheet(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::initPaymentSheet) == 2,
          "Expected initPaymentSheet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::initPaymentSheet, jsInvoker_, instance_, std::move(params));
    }
    jsi::Value intentCreationCallback(jsi::Runtime &rt, jsi::Object result) override {
      static_assert(
          bridging::getParameterCount(&T::intentCreationCallback) == 2,
          "Expected intentCreationCallback(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::intentCreationCallback, jsInvoker_, instance_, std::move(result));
    }
    jsi::Value presentPaymentSheet(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::presentPaymentSheet) == 2,
          "Expected presentPaymentSheet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::presentPaymentSheet, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value confirmPaymentSheetPayment(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::confirmPaymentSheetPayment) == 1,
          "Expected confirmPaymentSheetPayment(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::confirmPaymentSheetPayment, jsInvoker_, instance_);
    }
    jsi::Value createTokenForCVCUpdate(jsi::Runtime &rt, jsi::String cvc) override {
      static_assert(
          bridging::getParameterCount(&T::createTokenForCVCUpdate) == 2,
          "Expected createTokenForCVCUpdate(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::createTokenForCVCUpdate, jsInvoker_, instance_, std::move(cvc));
    }
    jsi::Value handleURLCallback(jsi::Runtime &rt, jsi::String url) override {
      static_assert(
          bridging::getParameterCount(&T::handleURLCallback) == 2,
          "Expected handleURLCallback(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleURLCallback, jsInvoker_, instance_, std::move(url));
    }
    jsi::Value createToken(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::createToken) == 2,
          "Expected createToken(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::createToken, jsInvoker_, instance_, std::move(params));
    }
    jsi::Value openApplePaySetup(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::openApplePaySetup) == 1,
          "Expected openApplePaySetup(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::openApplePaySetup, jsInvoker_, instance_);
    }
    jsi::Value verifyMicrodeposits(jsi::Runtime &rt, bool isPaymentIntent, jsi::String clientSecret, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::verifyMicrodeposits) == 4,
          "Expected verifyMicrodeposits(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::verifyMicrodeposits, jsInvoker_, instance_, std::move(isPaymentIntent), std::move(clientSecret), std::move(params));
    }
    jsi::Value collectBankAccount(jsi::Runtime &rt, bool isPaymentIntent, jsi::String clientSecret, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::collectBankAccount) == 4,
          "Expected collectBankAccount(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::collectBankAccount, jsInvoker_, instance_, std::move(isPaymentIntent), std::move(clientSecret), std::move(params));
    }
    jsi::Object getConstants(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getConstants) == 1,
          "Expected getConstants(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getConstants, jsInvoker_, instance_);
    }
    jsi::Value canAddCardToWallet(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::canAddCardToWallet) == 2,
          "Expected canAddCardToWallet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::canAddCardToWallet, jsInvoker_, instance_, std::move(params));
    }
    jsi::Value isCardInWallet(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::isCardInWallet) == 2,
          "Expected isCardInWallet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::isCardInWallet, jsInvoker_, instance_, std::move(params));
    }
    jsi::Value collectBankAccountToken(jsi::Runtime &rt, jsi::String clientSecret, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::collectBankAccountToken) == 3,
          "Expected collectBankAccountToken(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::collectBankAccountToken, jsInvoker_, instance_, std::move(clientSecret), std::move(params));
    }
    jsi::Value collectFinancialConnectionsAccounts(jsi::Runtime &rt, jsi::String clientSecret, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::collectFinancialConnectionsAccounts) == 3,
          "Expected collectFinancialConnectionsAccounts(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::collectFinancialConnectionsAccounts, jsInvoker_, instance_, std::move(clientSecret), std::move(params));
    }
    jsi::Value resetPaymentSheetCustomer(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::resetPaymentSheetCustomer) == 1,
          "Expected resetPaymentSheetCustomer(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::resetPaymentSheetCustomer, jsInvoker_, instance_);
    }
    jsi::Value isPlatformPaySupported(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::isPlatformPaySupported) == 2,
          "Expected isPlatformPaySupported(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::isPlatformPaySupported, jsInvoker_, instance_, std::move(params));
    }
    jsi::Value createPlatformPayPaymentMethod(jsi::Runtime &rt, jsi::Object params, bool usesDeprecatedTokenFlow) override {
      static_assert(
          bridging::getParameterCount(&T::createPlatformPayPaymentMethod) == 3,
          "Expected createPlatformPayPaymentMethod(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::createPlatformPayPaymentMethod, jsInvoker_, instance_, std::move(params), std::move(usesDeprecatedTokenFlow));
    }
    jsi::Value dismissPlatformPay(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::dismissPlatformPay) == 1,
          "Expected dismissPlatformPay(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::dismissPlatformPay, jsInvoker_, instance_);
    }
    jsi::Value updatePlatformPaySheet(jsi::Runtime &rt, jsi::Array summaryItems, jsi::Array shippingMethods, jsi::Array errors) override {
      static_assert(
          bridging::getParameterCount(&T::updatePlatformPaySheet) == 4,
          "Expected updatePlatformPaySheet(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updatePlatformPaySheet, jsInvoker_, instance_, std::move(summaryItems), std::move(shippingMethods), std::move(errors));
    }
    jsi::Value confirmPlatformPay(jsi::Runtime &rt, jsi::String clientSecret, jsi::Object params, bool isPaymentIntent) override {
      static_assert(
          bridging::getParameterCount(&T::confirmPlatformPay) == 4,
          "Expected confirmPlatformPay(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::confirmPlatformPay, jsInvoker_, instance_, std::move(clientSecret), std::move(params), std::move(isPaymentIntent));
    }
    jsi::Value configureOrderTracking(jsi::Runtime &rt, jsi::String orderTypeIdentifier, jsi::String orderIdentifier, jsi::String webServiceUrl, jsi::String authenticationToken) override {
      static_assert(
          bridging::getParameterCount(&T::configureOrderTracking) == 5,
          "Expected configureOrderTracking(...) to have 5 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::configureOrderTracking, jsInvoker_, instance_, std::move(orderTypeIdentifier), std::move(orderIdentifier), std::move(webServiceUrl), std::move(authenticationToken));
    }
    jsi::Value initCustomerSheet(jsi::Runtime &rt, jsi::Object params, jsi::Object customerAdapterOverrides) override {
      static_assert(
          bridging::getParameterCount(&T::initCustomerSheet) == 3,
          "Expected initCustomerSheet(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::initCustomerSheet, jsInvoker_, instance_, std::move(params), std::move(customerAdapterOverrides));
    }
    jsi::Value presentCustomerSheet(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::presentCustomerSheet) == 2,
          "Expected presentCustomerSheet(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::presentCustomerSheet, jsInvoker_, instance_, std::move(params));
    }
    jsi::Value retrieveCustomerSheetPaymentOptionSelection(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::retrieveCustomerSheetPaymentOptionSelection) == 1,
          "Expected retrieveCustomerSheetPaymentOptionSelection(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::retrieveCustomerSheetPaymentOptionSelection, jsInvoker_, instance_);
    }
    jsi::Value customerAdapterFetchPaymentMethodsCallback(jsi::Runtime &rt, jsi::Array paymentMethods) override {
      static_assert(
          bridging::getParameterCount(&T::customerAdapterFetchPaymentMethodsCallback) == 2,
          "Expected customerAdapterFetchPaymentMethodsCallback(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::customerAdapterFetchPaymentMethodsCallback, jsInvoker_, instance_, std::move(paymentMethods));
    }
    jsi::Value customerAdapterAttachPaymentMethodCallback(jsi::Runtime &rt, jsi::Object paymentMethod) override {
      static_assert(
          bridging::getParameterCount(&T::customerAdapterAttachPaymentMethodCallback) == 2,
          "Expected customerAdapterAttachPaymentMethodCallback(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::customerAdapterAttachPaymentMethodCallback, jsInvoker_, instance_, std::move(paymentMethod));
    }
    jsi::Value customerAdapterDetachPaymentMethodCallback(jsi::Runtime &rt, jsi::Object paymentMethod) override {
      static_assert(
          bridging::getParameterCount(&T::customerAdapterDetachPaymentMethodCallback) == 2,
          "Expected customerAdapterDetachPaymentMethodCallback(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::customerAdapterDetachPaymentMethodCallback, jsInvoker_, instance_, std::move(paymentMethod));
    }
    jsi::Value customerAdapterSetSelectedPaymentOptionCallback(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::customerAdapterSetSelectedPaymentOptionCallback) == 1,
          "Expected customerAdapterSetSelectedPaymentOptionCallback(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::customerAdapterSetSelectedPaymentOptionCallback, jsInvoker_, instance_);
    }
    jsi::Value customerAdapterFetchSelectedPaymentOptionCallback(jsi::Runtime &rt, std::optional<jsi::String> paymentOption) override {
      static_assert(
          bridging::getParameterCount(&T::customerAdapterFetchSelectedPaymentOptionCallback) == 2,
          "Expected customerAdapterFetchSelectedPaymentOptionCallback(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::customerAdapterFetchSelectedPaymentOptionCallback, jsInvoker_, instance_, std::move(paymentOption));
    }
    jsi::Value customerAdapterSetupIntentClientSecretForCustomerAttachCallback(jsi::Runtime &rt, jsi::String clientSecret) override {
      static_assert(
          bridging::getParameterCount(&T::customerAdapterSetupIntentClientSecretForCustomerAttachCallback) == 2,
          "Expected customerAdapterSetupIntentClientSecretForCustomerAttachCallback(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::customerAdapterSetupIntentClientSecretForCustomerAttachCallback, jsInvoker_, instance_, std::move(clientSecret));
    }
    jsi::Value createEmbeddedPaymentElement(jsi::Runtime &rt, jsi::Object intentConfig, jsi::Object configuration) override {
      static_assert(
          bridging::getParameterCount(&T::createEmbeddedPaymentElement) == 3,
          "Expected createEmbeddedPaymentElement(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::createEmbeddedPaymentElement, jsInvoker_, instance_, std::move(intentConfig), std::move(configuration));
    }
    jsi::Value confirmEmbeddedPaymentElement(jsi::Runtime &rt, int viewTag) override {
      static_assert(
          bridging::getParameterCount(&T::confirmEmbeddedPaymentElement) == 2,
          "Expected confirmEmbeddedPaymentElement(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::confirmEmbeddedPaymentElement, jsInvoker_, instance_, std::move(viewTag));
    }
    jsi::Value updateEmbeddedPaymentElement(jsi::Runtime &rt, jsi::Object intentConfig) override {
      static_assert(
          bridging::getParameterCount(&T::updateEmbeddedPaymentElement) == 2,
          "Expected updateEmbeddedPaymentElement(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::updateEmbeddedPaymentElement, jsInvoker_, instance_, std::move(intentConfig));
    }
    jsi::Value clearEmbeddedPaymentOption(jsi::Runtime &rt, int viewTag) override {
      static_assert(
          bridging::getParameterCount(&T::clearEmbeddedPaymentOption) == 2,
          "Expected clearEmbeddedPaymentOption(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::clearEmbeddedPaymentOption, jsInvoker_, instance_, std::move(viewTag));
    }

  private:
    friend class NativeStripeSdkModuleCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
