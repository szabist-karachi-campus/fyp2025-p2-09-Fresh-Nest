/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of rnstripe symbols
#ifndef rnstripe_H
#define rnstripe_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN
namespace JS {
  namespace NativeStripeSdkModule {
    struct ConstantsAPI_VERSIONS {

      struct Builder {
        struct Input {
          RCTRequired<NSString *> CORE;
          RCTRequired<NSString *> ISSUING;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing ConstantsAPI_VERSIONS */
        Builder(ConstantsAPI_VERSIONS i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static ConstantsAPI_VERSIONS fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      ConstantsAPI_VERSIONS(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
namespace JS {
  namespace NativeStripeSdkModule {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<JS::NativeStripeSdkModule::ConstantsAPI_VERSIONS::Builder> API_VERSIONS;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeStripeSdkModuleSpec <RCTBridgeModule, RCTTurboModule>

- (void)initialise:(NSDictionary *)params
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)createPaymentMethod:(NSDictionary *)params
                    options:(NSDictionary *)options
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)handleNextAction:(NSString *)paymentIntentClientSecret
               returnURL:(NSString * _Nullable)returnURL
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)handleNextActionForSetup:(NSString *)setupIntentClientSecret
                       returnURL:(NSString * _Nullable)returnURL
                         resolve:(RCTPromiseResolveBlock)resolve
                          reject:(RCTPromiseRejectBlock)reject;
- (void)confirmPayment:(NSString *)paymentIntentClientSecret
                params:(NSDictionary *)params
               options:(NSDictionary *)options
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)confirmSetupIntent:(NSString *)paymentIntentClientSecret
                    params:(NSDictionary *)params
                   options:(NSDictionary *)options
                   resolve:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)retrievePaymentIntent:(NSString *)clientSecret
                      resolve:(RCTPromiseResolveBlock)resolve
                       reject:(RCTPromiseRejectBlock)reject;
- (void)retrieveSetupIntent:(NSString *)clientSecret
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)initPaymentSheet:(NSDictionary *)params
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;
- (void)intentCreationCallback:(NSDictionary *)result
                       resolve:(RCTPromiseResolveBlock)resolve
                        reject:(RCTPromiseRejectBlock)reject;
- (void)presentPaymentSheet:(NSDictionary *)options
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)confirmPaymentSheetPayment:(RCTPromiseResolveBlock)resolve
                            reject:(RCTPromiseRejectBlock)reject;
- (void)createTokenForCVCUpdate:(NSString *)cvc
                        resolve:(RCTPromiseResolveBlock)resolve
                         reject:(RCTPromiseRejectBlock)reject;
- (void)handleURLCallback:(NSString *)url
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)createToken:(NSDictionary *)params
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)openApplePaySetup:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)verifyMicrodeposits:(BOOL)isPaymentIntent
               clientSecret:(NSString *)clientSecret
                     params:(NSDictionary *)params
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)collectBankAccount:(BOOL)isPaymentIntent
              clientSecret:(NSString *)clientSecret
                    params:(NSDictionary *)params
                   resolve:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)canAddCardToWallet:(NSDictionary *)params
                   resolve:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)isCardInWallet:(NSDictionary *)params
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)collectBankAccountToken:(NSString *)clientSecret
                         params:(NSDictionary *)params
                        resolve:(RCTPromiseResolveBlock)resolve
                         reject:(RCTPromiseRejectBlock)reject;
- (void)collectFinancialConnectionsAccounts:(NSString *)clientSecret
                                     params:(NSDictionary *)params
                                    resolve:(RCTPromiseResolveBlock)resolve
                                     reject:(RCTPromiseRejectBlock)reject;
- (void)resetPaymentSheetCustomer:(RCTPromiseResolveBlock)resolve
                           reject:(RCTPromiseRejectBlock)reject;
- (void)isPlatformPaySupported:(NSDictionary *)params
                       resolve:(RCTPromiseResolveBlock)resolve
                        reject:(RCTPromiseRejectBlock)reject;
- (void)createPlatformPayPaymentMethod:(NSDictionary *)params
               usesDeprecatedTokenFlow:(BOOL)usesDeprecatedTokenFlow
                               resolve:(RCTPromiseResolveBlock)resolve
                                reject:(RCTPromiseRejectBlock)reject;
- (void)dismissPlatformPay:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)updatePlatformPaySheet:(NSArray *)summaryItems
               shippingMethods:(NSArray *)shippingMethods
                        errors:(NSArray *)errors
                       resolve:(RCTPromiseResolveBlock)resolve
                        reject:(RCTPromiseRejectBlock)reject;
- (void)confirmPlatformPay:(NSString *)clientSecret
                    params:(NSDictionary *)params
           isPaymentIntent:(BOOL)isPaymentIntent
                   resolve:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)configureOrderTracking:(NSString *)orderTypeIdentifier
               orderIdentifier:(NSString *)orderIdentifier
                 webServiceUrl:(NSString *)webServiceUrl
           authenticationToken:(NSString *)authenticationToken
                       resolve:(RCTPromiseResolveBlock)resolve
                        reject:(RCTPromiseRejectBlock)reject;
- (void)initCustomerSheet:(NSDictionary *)params
 customerAdapterOverrides:(NSDictionary *)customerAdapterOverrides
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)presentCustomerSheet:(NSDictionary *)params
                     resolve:(RCTPromiseResolveBlock)resolve
                      reject:(RCTPromiseRejectBlock)reject;
- (void)retrieveCustomerSheetPaymentOptionSelection:(RCTPromiseResolveBlock)resolve
                                             reject:(RCTPromiseRejectBlock)reject;
- (void)customerAdapterFetchPaymentMethodsCallback:(NSArray *)paymentMethods
                                           resolve:(RCTPromiseResolveBlock)resolve
                                            reject:(RCTPromiseRejectBlock)reject;
- (void)customerAdapterAttachPaymentMethodCallback:(NSDictionary *)paymentMethod
                                           resolve:(RCTPromiseResolveBlock)resolve
                                            reject:(RCTPromiseRejectBlock)reject;
- (void)customerAdapterDetachPaymentMethodCallback:(NSDictionary *)paymentMethod
                                           resolve:(RCTPromiseResolveBlock)resolve
                                            reject:(RCTPromiseRejectBlock)reject;
- (void)customerAdapterSetSelectedPaymentOptionCallback:(RCTPromiseResolveBlock)resolve
                                                 reject:(RCTPromiseRejectBlock)reject;
- (void)customerAdapterFetchSelectedPaymentOptionCallback:(NSString * _Nullable)paymentOption
                                                  resolve:(RCTPromiseResolveBlock)resolve
                                                   reject:(RCTPromiseRejectBlock)reject;
- (void)customerAdapterSetupIntentClientSecretForCustomerAttachCallback:(NSString *)clientSecret
                                                                resolve:(RCTPromiseResolveBlock)resolve
                                                                 reject:(RCTPromiseRejectBlock)reject;
- (void)createEmbeddedPaymentElement:(NSDictionary *)intentConfig
                       configuration:(NSDictionary *)configuration
                             resolve:(RCTPromiseResolveBlock)resolve
                              reject:(RCTPromiseRejectBlock)reject;
- (void)confirmEmbeddedPaymentElement:(NSInteger)viewTag
                              resolve:(RCTPromiseResolveBlock)resolve
                               reject:(RCTPromiseRejectBlock)reject;
- (void)updateEmbeddedPaymentElement:(NSDictionary *)intentConfig
                             resolve:(RCTPromiseResolveBlock)resolve
                              reject:(RCTPromiseRejectBlock)reject;
- (void)clearEmbeddedPaymentOption:(NSInteger)viewTag
                           resolve:(RCTPromiseResolveBlock)resolve
                            reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeStripeSdkModule::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeStripeSdkModule::Constants::Builder>)getConstants;

@end

@interface NativeStripeSdkModuleSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

- (void)emitOnConfirmHandlerCallback:(NSDictionary *)value;
- (void)emitOnFinancialConnectionsEvent:(NSDictionary *)value;
- (void)emitOnOrderTrackingCallback;
- (void)emitOnCustomerAdapterFetchPaymentMethodsCallback;
- (void)emitOnCustomerAdapterAttachPaymentMethodCallback:(NSDictionary *)value;
- (void)emitOnCustomerAdapterDetachPaymentMethodCallback:(NSDictionary *)value;
- (void)emitOnCustomerAdapterSetSelectedPaymentOptionCallback:(NSDictionary *)value;
- (void)emitOnCustomerAdapterFetchSelectedPaymentOptionCallback;
- (void)emitOnCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback;
- (void)emitEmbeddedPaymentElementDidUpdateHeight:(NSDictionary *)value;
- (void)emitEmbeddedPaymentElementWillPresent;
- (void)emitEmbeddedPaymentElementDidUpdatePaymentOption:(NSDictionary *)value;
- (void)emitEmbeddedPaymentElementFormSheetConfirmComplete:(NSDictionary *)value;
- (void)emitEmbeddedPaymentElementRowSelectionImmediateAction;
- (void)emitEmbeddedPaymentElementLoadingFailed:(NSDictionary *)value;
@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeStripeSdkModule'
   */
  class JSI_EXPORT NativeStripeSdkModuleSpecJSI : public ObjCTurboModule {
  public:
    NativeStripeSdkModuleSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline JS::NativeStripeSdkModule::ConstantsAPI_VERSIONS::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto CORE = i.CORE.get();
  d[@"CORE"] = CORE;
  auto ISSUING = i.ISSUING.get();
  d[@"ISSUING"] = ISSUING;
  return d;
}) {}
inline JS::NativeStripeSdkModule::ConstantsAPI_VERSIONS::Builder::Builder(ConstantsAPI_VERSIONS i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeStripeSdkModule::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto API_VERSIONS = i.API_VERSIONS.get();
  d[@"API_VERSIONS"] = API_VERSIONS.buildUnsafeRawValue();
  return d;
}) {}
inline JS::NativeStripeSdkModule::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
NS_ASSUME_NONNULL_END
#endif // rnstripe_H
